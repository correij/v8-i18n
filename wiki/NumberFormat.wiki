= Introduction =
Formatting numbers is a complex, locale sensitive operation.

== Intl vs. v8Intl ==
You can use both Intl and v8Intl global objects for now, but our plan is to remove support for v8Intl in the future.

== Settings ==
!NumberFormat constructor accepts optional locale array and optional settings object.<br>
Settings object and valid values for all the keys:
{{{
style: {'decimal', 'percent', 'currency'}
currency: {'USD', 'RSD', ...} // ISO 4217 3-letter currency code. Currency has to be specified if style: 'currency'.
currencyDisplay: {'code', 'symbol', 'name'}
numberingSystem: {'latn', 'thai', ...} // Numbering system listed in TR#35
minimumIntegerDigits: {0, 1,...}
minimumFractionDigits: {0, 1,...}
maximumFractionDigits: {0, 1,...}
minimumSignificantDigits: {0, 1,...}
maximumSignificantDigits: {0, 1,...}
}}}

Other formatting properties can be passed using Unicode extensions:
{{{
Key    Property            Type       Values
nu     numberingSystem     "string"   "thai", ...
}}}

== Default locale ==
The safest approach is to specify target locale and check if it was available through resolvedOptions method.

== Default settings ==
{{{
style: 'decimal'
}}}

Other options are locale specific.

== Methods ==
{{{
/**
 * Returns a string given the number. String is formatted using
 * the pattern and locale data provided in the constructor.
 */
format(number)

/**
 * This method is not part of the ECMAScript 402 specification and can change at any time.
 * Returns the number given the string representation of that number, or
 * it returns undefined if the string can't be parsed.
 * Due to limitation of the underlying library we don't support currency parsing at this time.
 */
v8Parse(string)
}}}

== !NumberFormat with default locale and settings ==
{{{
var nf = Intl.NumberFormat();
nf.format(12345.67);  // Returns a string.
}}}

== !NumberFormat with user locale and default settings ==
{{{
var nf = Intl.NumberFormat(['sr', 'de', 'fr']);
nf.format(12345.67);
}}}

== !NumberFormat with user locale and settings ==
{{{
var nf = Intl.NumberFormat(['sr', 'de', 'fr'], {style:'currency', currency:'RSD', currencyDisplay:'code'});
nf.format(12345.67);
}}}

== !NumberFormat with default locale and user settings ==
{{{
var nf = Intl.NumberFormat([], {style:'currency', currency:'RSD', currencyDisplay:'code'});
nf.format(12345.67);
}}}

== !NumberFormat with user locale and Unicode extension ==
{{{
var nf = Intl.NumberFormat(['th-u-nu-thai']);
nf.format(12345.67);
}}}

== !NumberFormat used to parse ==
{{{
var nf = Intl.NumberFormat(['en']);
nf.parse('123,45.67');
}}}
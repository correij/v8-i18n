= Introduction =
Formatting numbers is a complex, locale sensitive operation.

== Settings ==
!NumberFormat constructor accepts optional locale array and optional settings object.<br>
Settings object and valid values for all the keys:
{{{
style: {'decimal', 'percent', 'currency'}
currency: {'USD', 'RSD', ...} // ISO 4217 3-letter currency code. Currency has to be specified if style: 'currency'.
currencyDisplay: {'code', 'symbol', 'name'}
numberingSystem: {'latn', 'thai', ...} // Numbering system listed in TR#35
minimumIntegerDigits: {0, 1,...}
minimumFractionDigits: {0, 1,...}
maximumFractionDigits: {0, 1,...}
minimumSignificantDigits: {0, 1,...}
maximumSignificantDigits: {0, 1,...}
}}}

Other formatting properties can be passed using Unicode extensions:
{{{
Key    Property            Type       Values
nu     numberingSystem     "string"   "thai", ...
}}}

== Default locale ==
Default locale is set to *navigator.language* if it's supported by Chrome, or to *und*.<br>
The safest approach is to specify target locale and check if it was available through resolvedOptions property.

== Default settings ==
{{{
style: 'decimal'
}}}

Other options are locale specific.

== Setting locale info ==
It is more efficient to create a global LocaleList object and use it
when constructing the NumberFormat (or any other service). It avoids re-validation of locales in the list.
{{{
var localeList = v8Intl.LocaleList(['sr-rs', 'fr-CA', 'de-de'])
// Result is well formed and canonicalized: ['sr-RS', 'fr-CA', 'de-DE'] 
}}}

== !NumberFormat with default locale and settings ==
{{{
var nf = v8Intl.NumberFormat();
nf.format(12345.67);  // Returns a string.
}}}

== !NumberFormat with user locale and default settings ==
{{{
var nf = v8Intl.NumberFormat(localeList);
nf.format(12345.67);
}}}

== !NumberFormat with user locale and settings ==
{{{
var nf = v8Intl.NumberFormat(localeList, {style:'currency', currency:'RSD', currencyDisplay:'code'});
nf.format(12345.67);
}}}

== !NumberFormat with user locale and Unicode extension ==
{{{
var nf = v8Intl.NumberFormat(['th-u-nu-thai']);
nf.format(12345.67);
}}}